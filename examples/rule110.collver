// Rule 110 cellular automaton implemented in Collver
// https://en.wikipedia.org/wiki/Rule_110

include "std.collver"

const BOARD_CAP 100 end
const BOARD_HEIGHT 100 end

proc 2dup
  over over
end

memory board BOARD_CAP end

proc init_edges
  // Initialize 1s on the right edge of the board
  1 board BOARD_CAP + 1 - !8
end

// ascii code of the character to be printed in a blank space
const BLANK_CHAR 32 end
// ascii code of the character to be printed in a filled space
const FILLED_CHAR 35 end
// this const calculates how much the difference is between the ascii codes at compile time
const PRINT_DIFF FILLED_CHAR BLANK_CHAR - end

proc print_board
  memory draw_buf BOARD_CAP 1 + end

  draw_buf BOARD_CAP + 1 - 0 swap !8
  BOARD_CAP board draw_buf memcpy

  // Iterate over the draw buffer, converting 0 and 1 to ' ' and '*'
  BOARD_CAP 0 while 2dup > do
    dup draw_buf + dup @8 // Get the character at `n`, leaving (n+draw_buf) on the stack
    PRINT_DIFF * BLANK_CHAR + // Multiply by PRINT_DIFF, and add BLANK_CHAR. For example: '*' = 42, so if it equals 1, it will be 1*10+32=42, and if 0 it will be 0*10+32=32.
    swap !8 // Write it back to the correct location
    1 +
  end drop drop
  draw_buf puts
  "\n" puts
end

proc apply_110 // int -> int
  // Given an int of 1 byte (0-7), apply rule 110 to it
  110 swap >> 1 &
end

proc update_board
  // Apply rule 110 to the board

  // get initial pattern
  board     @8 1 <<
  board 1 + @8
  |

  2 while dup BOARD_CAP 1 - < do
    // Calculate the new pattern
    swap 1 << 7 &
    // Here we add 1 to the address that we read from so that the pattern won't be mirrored
    2dup over board + 1 + @8 |
    // Apply rule 110
    swap over apply_110
    // Write the rule 110-ed number back to memory
    swap board + !8
    // Get rid of the unnecessary data left on stack
    swap drop
    // Place the iterator back on top of the pattern on stack
    swap

    // Increment iterator
    1 +
  end drop drop
end

proc main
  init_edges

  0 while dup BOARD_HEIGHT < do
    // dup print
    print_board
    update_board
    1 +
  end drop drop
end
