// Rule 110 cellular automaton implemented in Collver
// https://en.wikipedia.org/wiki/Rule_110
// Note: This program is capable of simulating any
// Elementary Cellular Automaton, 110 was chosen because it looks cool.
// https://en.wikipedia.org/wiki/Elementary_cellular_automaton
// The rule can be changed by modifying the const `RULE`
// Here are some more fun rules to try:
// https://en.wikipedia.org/wiki/Elementary_cellular_automaton#:~:text=Images%20for%20rules%200%2D99%5Bedit%5D
// Note: this list is not comprehensive, it excludes rules 100-255
// Rule 99 is my personal favorite!

include "std.collver"

const BOARD_CAP 100 end
const BOARD_HEIGHT 100 end

proc 2dup
  over over
end

memory board BOARD_CAP end

proc init_board
  // Initialize 1s on the right edge of the board
  1 board BOARD_CAP 2 / + !8
end

// We have to use aliases because consts cannot be assigned to string literals
// TODO: Implement string literals as const values
alias BLANK_STR "  " end
alias FILLED_STR "▒▒" end
// Other cool characters:
// "▒▒"
// "▓▓"
// "██"
// "*"
// alias BLANK_STR " " end
// alias FILLED_STR "*" end

proc print_board
  0 while dup BOARD_CAP < do
    // Get the cell from the board at the current position
    if dup board + @8 do
      FILLED_STR puts
    else
      BLANK_STR puts
    end
    1 +
  end drop // Make sure you drop the iterator at the end of the while loop!
  "\n" puts
end

const RULE 110 end

proc apply_rule // int -> int
  // Given an int of 1 byte (0-7), apply rule 110 to it
  RULE swap >> 1 &
end

proc update_board
  // Apply rule 110 to the board

  // get initial pattern
  board     @8 1 <<
  board 1 + @8
  |

  2 while dup BOARD_CAP 1 - < do
    // Calculate the new pattern
    swap 1 << 7 &
    // Here we add 1 to the address that we read from so that the pattern won't be mirrored
    2dup over board + 1 + @8 |
    // Apply rule 110
    swap over apply_rule
    // Write the rule 110-ed number back to memory
    swap board + !8
    // Get rid of the unnecessary data left on stack
    swap drop
    // Place the iterator back on top of the pattern on stack
    swap

    // Increment iterator
    1 +
  end drop drop
end

proc main
  init_board

  0 while dup BOARD_HEIGHT < do
    // dup print
    print_board
    update_board
    1 +
  end drop drop
end
