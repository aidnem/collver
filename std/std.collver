
include "consts.collver"

// STACK MANIPULATION

proc swap // a b -> b a
  memory a 8 end
  memory b 8 end
  b !64
  a !64
  b @64
  a @64
end

proc over // a b -> a b a
  memory a 8 end
  memory b 8 end
  b !64
  a !64
  a @64
  b @64
  a @64
end

// MEMORY MANIPULATION

// TODO: Fix puts dependency loop (puts depends on some memory manip procs, salloc depends on puts)
// proc salloc // int -> ptr
//   // Works exactly like the `alloc` intrinsic, except that it handles a failure to allocate the memory
//   memory size sizeof(int) end
//   dup size !64 // Leave the size on the stack
// 
//   alloc
// 
//   dup if 0 = do // Check if the pointer returned is 0 (indicates a failure in the malloc function)
//     "ERROR: Failed to allocate memory.\nAttempted size of allocated memory: " puts size @64 print
//     "Errno: " puts get_errno print
//     1 exit
//   end // Because of the `dup` before the if, the pointer is still on the stack after this if
// end

proc inc64 // ptr ->
  // Given a pointer to an i64, increment the value stored there
  dup
  @64
  1 +
  swap // pointer comes second for !
  !64
end

proc dec64 // ptr ->
  // Given a pointer to an i64, decrement the value stored there
  dup
  @64
  1 -
  swap // pointer comes second for !
  !64
end

proc memcpy // size src dst ->
  // Copies `size` number of bytes from address `src` to address `dst`
  memory size 8 end
  memory src 8 end
  memory dst 8 end
  dst !64
  src !64
  size !64

  0 while dup size @64 < do
    dup  src @64 + @8
    over dst @64 + !8
    1 +
  end drop
end

// STRING MANIPULATION

proc strlen // ptr -> int
  // Given a pointer to a string, return its length
  // NOTE: Only works on null-terminated strings (string literals are null-terminated, but strings created at runtime may not be, so be careful)
  memory len 8 end
  0 len !64

  while dup len @64 +  @8 do
     len inc64
  end drop

  len @64
end

proc strcpy // src -> ptr
  // Given a pointer to a string, make a copy of it, returning the pointer to the new string
  memory src 8 end
  memory len 8 end
  memory dst 8 end
  // src = src
  // len = len(src)
  // dst = dst

  dup src !64 // Keep src on the stack for the next step
  strlen dup len !64 // Keep len(src) on the stack for the next step
  alloc dst !64
  len @64 src @64 dst @64 memcpy
  dst @64 // 'return' the destination pointer
end

proc strconcat // str1 str2 -> str3
  // Concatenate two strings, returning the pointer to the new string
  memory str1 sizeof(ptr) end
  memory len_str1 sizeof(int) end
  memory str2 sizeof(ptr) end
  memory len_str2 sizeof(int) end
  memory dst sizeof(ptr) end
  dup str2 !64 strlen len_str2 !64 // Store the length and pointer to str2 in memory
  dup str1 !64 strlen len_str1 !64 // Store the length and pointer to str1 in memory
  len_str1 @64 len_str2 @64 + 1 + alloc dst !64 // Sum the lengths of the two strings and allocate that many bytes, storing the pointer in dst (adding 1 to null terminate)
  len_str1 @64 str1 @64 dst @64 memcpy // Copy str1 to the beginning of the new memory (memcpy requires a length so we need len_str1 at the beginning)
  len_str2 @64 str2 @64 dst @64 len_str1 @64 + memcpy // Add the length of str1 to the pointer and copy str2 to there
  dst @64 len_str1 @64 len_str2 @64 + + 0 swap !8 // Write a `0` at the end, null-terminating the new string
  dst @64 // Return the pointer to the new, concatenated string
end

proc strconcat_d // str1 str2 -> str3
  // Exact same as for strconcat, but it frees the original two strings afterwards
  // NOTE: ONLY FOR STRINGS THAT HAVE BEEN DYNAMICALLY ALLOCATED WITH THE `alloc` WORD
  memory str2 sizeof(ptr) end
  memory str1 sizeof(ptr) end
  str2 !64
  dup str1 !64
  str2 @64
  strconcat
  str1 @64 free
  str2 @64 free
end

// SYSCALLS

// While these procedures may seem useless, they are here to wrap the functions and include some documentation so that the developer is not completely confused.
// In addition, error handling will eventually be wrapped into these, so they aren't completely useless

// NOTE: Arguments shown in this section's documentation comments are in the order of bottom to top of the stack.
//       For example, open accepts its arguments in the order: [<BOTTOM OF STACK> *file_path, flags <TOP OF STACK>].
//       Keep this in mind when syscalls magically fail, you probably just put the arguments in the wrong order.

// File descriptors
const FD_STDIN 0 end
const FD_STDOUT 1 end
const FD_STDERR 2 end

// open(): Required flags - at least one of these bits must be present
const O_RDONLY 0 end
const O_WRONLY 1 end
const O_RDWR   2 end

// Non-required flags
const O_CLOEXEC   16777216 end
const O_CREAT     512 end
const O_DIRECTORY 1048576 end
const O_EXCL      2048 end
const O_NOCTTY    131072 end
const O_NOFOLLOW  256 end
const O_TRUNC     1024 end
// TODO: Implement the rest of these constants https://man7.org/linux/man-pages/man2/open.2.html

// int open(char *fp, int flags)
proc sys_open // ptr int -> int
  // Open a file (returns a file descriptor)
  // Arguments:
  //  - File path - A char pointer (char*)
  //  - Flags     - An integer: must be one of { O_RDONLY, O_WRONLY, O_RDWR },
  //                optionally bitwised or-ed with any O_{name} constants
  // Return value:
  //  - Success: File descriptor of opened file (int)
  //  - Failure: `-1`, `errno` is set
  // For more information, see https://man7.org/linux/man-pages/man2/open.2.html

  ll_open
end

// int close(int fd)
proc sys_close // int -> int
  // Close a file
  // Arguments:
  //  - File descriptor - file descriptor of the file to be closed (int)
  // Return value:
  //  - Success: `0`
  //  - Failure: `-1`, `errno` is set

  ll_close
end

const SEEK_SET 0 end
const SEEK_CUR 1 end
const SEEK_END 2 end

// int lseek(int fd, int offset, int whence)
proc sys_lseek // int int int -> int
  // Reposition file offset (move the `cursor` around in an opened file)
  // Arguments:
  //  - File descriptor - file descriptor of file that is being seeked within (int)
  //  - Offset          - A number of bytes (varies based on `whence`'s value) (int)
  //  - Whence          - One of { SEEK_SET, SEEK_CUR, SEEK_END} denoting which type of repositioning of the cursor should occur:
  //     - SEEK_SET - The file offset is set to `offset` bytes
  //     - SEEK_CUR - The file offset is set to its current location plus `offset` bytes
  //     - SEEK_END - The file offset is set to the size of the file plus `offset` bytes
  // Return value:
  //  - Success: The resulting offset value (location in file) after the seek occurs (measured in bytes, from the beginning of the file) (int)
  //  - Failure: `-1`, `errno` is set
  // For more information, see https://man7.org/linux/man-pages/man2/lseek.2.html

  ll_lseek
end

proc fdtell // int -> int
  // Get the current offset in a file, given a file descriptor
  // Arguments:
  //  - File descriptor - file descriptor of the file whose offset is being gotten (int)
  // Return value:
  //  - Success: The offset value (location in file) in bytes (from the start of the file) (int)
  //  - Failure: `-1`, `errno` is set (error conditions come from the syscall `lseek`)

  0 SEEK_CUR sys_lseek
end

proc fdsize // int -> int
  // Find the size of a file (in bytes) given a file descriptor
  // This procedure does not modify the current offset of the file (it modifies it with lseek but restores it afterwards)
  // Arguments:
  //  - File descriptor - Which file should be sized (int)
  // Return value:
  //  - Success: The size of the file (in bytes)
  //  - Failure: `-1`, `errno` is set (error conditions come from the syscall `lseek`)
  memory offset_orig sizeof(int) end

  dup  fdtell offset_orig !64
  dup  0 SEEK_END sys_lseek
  swap offset_orig @64 SEEK_SET sys_lseek drop
end

// int read(int fd, ptr buf, int count)
proc sys_read // int ptr int -> int
  // Read `count` bytes from file descriptor `fd` into memory, starting at `ptr`
  // This procedure moves the offset of the file descriptor forward by `count` bytes
  // Arguments:
  //  - File descriptor - file descriptor of file that is being read (int)
  //  - Buffer          - A pointer to the start of the buffer that the data will be written to (ptr)
  //  - Count           - The number of bytes to be read (int)
  // Return value:
  //  - Success: The number of bytes read from the file (`0` indicates EOF). Sometimes, fewer bytes than were requested are actually read, this is not an error.
  //  - Failure: `-1`, `errno` is set
  // For more information, see https://man7.org/linux/man-pages/man2/read.2.html

  ll_read
end

// int write(int fd, ptr buf, int count)
proc sys_write // int ptr int -> int
  // Write `count` bytes from string (char*) buf into file `fd`
  // This procedure moves the offset of the file descriptor forward by `count` bytes
  // Arguments:
  //  - File descriptor - file descriptor of file that is being written (int)
  //  - Buffer          - A pointer to the start of the buffer that the data will be read from to (ptr)
  //  - Count           - The number of bytes to be written (int)
  // Return value:
  //  - Success: The number of bytes written to the file (`0` indicates EOF). Sometimes, fewer bytes than were requested are actually read, this is not an error.
  //  - Failure: `-1`, `errno` is set

  ll_write
end

// BASIC IO

proc fd_readline
  memory fd sizeof(int) end
  memory strptr sizeof(ptr) end
  memory buf sizeof(byte) 2 * end
  fd !64
  buf     0 swap !8
  buf 1 + 0 swap !8
  "" strcpy strptr !64
  // strptr cpy(buf)
  while buf @8 10 != do
    fd @64 buf 1 sys_read drop
    strptr @64 buf strcpy strconcat_d strptr !64
    strptr @64 strlen strptr @64 + 0 swap !8
  end

  strptr @64
end

proc fd_puts // fd ptr ->
  // Write a string (null terminated) to a file (by fd)

  // fd ptr len(ptr)
  dup strlen // Get the number of bytes on top of the stack
  sys_write // Print it out
  drop // Drop the number of bytes written
end

proc puts // ptr ->
  // Write a string (null terminated) to stdout
  FD_STDOUT swap fd_puts
end

proc eputs // ptr ->
  // Write a string (null terminated) to stderr
  FD_STDERR swap fd_puts
end

proc readline // -> ptr
  // Read a line from standard in
  FD_STDIN fd_readline
end

proc dec_digits // int -> int
  // Given an int, find the number of decimal digits it has
  // 1
  if dup 0 = do
    drop 1
  else
    0 swap
    while dup do
      10 / swap 1 + swap
    end

    drop
  end
end

proc itos // int -> ptr
  // Given an int, convert it to a string (char*)
  memory num sizeof(int) end
  memory strptr sizeof(ptr) end
  // here eputs ":error: std lib procedure `itos` is not implemented yet\n" eputs 1 exit
  num !64 // Write the number to the `num` variable
  // (digits(*num) *strptr)+
  num @64 dec_digits dup 1 + alloc strptr !64 // Find the number of digits in number, add one (null terminate), and allocate that, storing ptr to that string in `strptr`
  // We leave the number of digits on stack for later
  strptr @64 + 1 -
  // strptrlol 
  dup 0 swap !8  // Null terminate
  while dup strptr @64 >= do
    num @64 10 % 48 +
    over !8
    num @64 10 / num !64
    1 -
  end

  strptr @64
end

proc putn // int ->
  // Given an int, print it to stdout
  itos puts
end

proc eputn // int ->
  // Given an int, print it to stderr
  itos eputs
end

proc print // int ->
  // Given an int, print it to stdout with a newline
  itos puts "\n" puts drop
  // TODO: Find out what ^this mystery value is that we're dropping, puts calls fd_puts which *should* drop the bytes written afterwards
end

proc eprint // int ->
  // Given an int, print it to stderr with a newline
  itos puts "\n" eputs
end

// PATH AND FILE UTILITIES

proc fd_to_str // int -> ptr
  // Given a file descriptor, return a new (null terminated) string
  // This procedure takes a file descriptor, resets its offset to 0, calculates the size, allocates that many byte + 1, reads the whole file, and then sets the last byte to 0 (to null terminate the string).
  // This procedure will leave the offset of the file at the end of the file.
  // IMPORTANT: This procedure panics if the sys_read call doesn't read the entire file in one attempt. This is not necessary, and it will be fixed later.
  memory size sizeof(int) end // = fdsize(fd)
  memory bufptr sizeof(ptr) end // = bufptr

  dup 0 SEEK_SET sys_lseek drop
  dup fdsize dup size !64
  1 + alloc bufptr !64
  bufptr @64 size @64 sys_read
  if dup size @64 != do
    "ERROR: Failed to read file into memory\n" puts
    "File size: " puts size @64 print
    "Bytes read: " puts print
    1 exit
    // TODO: Make this procedure simply handle not reading the whole file, instead of panicking
  end
  0 bufptr @64 size @64 + !8
  bufptr @64
end

proc fp_to_str // ptr -> ptr
  // Given a pointer to a string (the path to the file), create a string in memory containing the contents of the file, and free the file path string
  memory fp_str sizeof(ptr) end
  memory fd sizeof(int) end
  fp_str !64
  fp_str @64 O_RDONLY sys_open fd !64
  fd @64 fd_to_str
  fd @64 sys_close drop
  fp_str @64 free
end

